/* The following code was generated by JFlex 1.7.0 */

/* A JFLex scanner for parsing postgresql dumps to extract jdbc commands*/

package pro.trautmann.pg.hibernate;

import java.lang.StringBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;


/**
* This class is a PostgreSQL scanner for extracting jdbc commands.
* <p>
* DO NOT EDIT - this file will be re-generated on each build.
* Instead edit pg_dump.flex file
*
* @author andreas.trautmann
*/

class PSQLScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMAND = 2;
  public static final int COPY = 4;
  public static final int DECLARE = 6;
  public static final int INSERT = 8;
  public static final int COPYDATA = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\1\0\1\6\1\1\22\0\1\14\1\0\1\32"+
    "\1\0\1\4\3\0\1\35\1\5\3\0\1\7\1\34\1\0\12\31"+
    "\1\0\1\3\5\0\1\22\1\31\1\21\1\10\1\16\1\36\1\27"+
    "\1\31\1\31\1\31\1\26\1\20\1\23\1\24\1\12\1\13\1\31"+
    "\1\11\1\15\1\17\1\31\1\25\2\31\1\30\1\31\1\0\1\33"+
    "\2\0\1\31\1\0\3\31\1\41\4\31\1\42\4\31\1\43\4\31"+
    "\1\37\1\40\6\31\57\0\1\31\12\0\1\31\4\0\1\31\5\0"+
    "\27\31\1\0\37\31\1\0\u01ca\31\4\0\14\31\16\0\5\31\7\0"+
    "\1\31\1\0\1\31\21\0\165\31\1\0\2\31\2\0\4\31\1\0"+
    "\1\31\6\0\1\31\1\0\3\31\1\0\1\31\1\0\24\31\1\0"+
    "\123\31\1\0\213\31\1\0\255\31\1\0\46\31\2\0\1\31\7\0"+
    "\47\31\11\0\55\31\1\0\1\31\1\0\2\31\1\0\2\31\1\0"+
    "\1\31\10\0\33\31\5\0\3\31\35\0\13\31\5\0\112\31\4\0"+
    "\146\31\1\0\10\31\2\0\12\31\1\0\23\31\2\0\1\31\20\0"+
    "\73\31\2\0\145\31\16\0\66\31\4\0\1\31\5\0\56\31\22\0"+
    "\34\31\104\0\25\31\1\0\10\31\26\0\16\31\1\0\201\31\2\0"+
    "\12\31\1\0\23\31\1\0\10\31\2\0\2\31\2\0\26\31\1\0"+
    "\7\31\1\0\1\31\3\0\4\31\2\0\11\31\2\0\2\31\2\0"+
    "\4\31\10\0\1\31\4\0\2\31\1\0\5\31\2\0\14\31\17\0"+
    "\3\31\1\0\6\31\4\0\2\31\2\0\26\31\1\0\7\31\1\0"+
    "\2\31\1\0\2\31\1\0\2\31\2\0\1\31\1\0\5\31\4\0"+
    "\2\31\2\0\3\31\3\0\1\31\7\0\4\31\1\0\1\31\7\0"+
    "\20\31\13\0\3\31\1\0\11\31\1\0\3\31\1\0\26\31\1\0"+
    "\7\31\1\0\2\31\1\0\5\31\2\0\12\31\1\0\3\31\1\0"+
    "\3\31\2\0\1\31\17\0\4\31\2\0\12\31\11\0\1\31\7\0"+
    "\3\31\1\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31\1\0"+
    "\2\31\1\0\5\31\2\0\11\31\2\0\2\31\2\0\3\31\10\0"+
    "\2\31\4\0\2\31\1\0\5\31\2\0\12\31\1\0\1\31\20\0"+
    "\2\31\1\0\6\31\3\0\3\31\1\0\4\31\3\0\2\31\1\0"+
    "\1\31\1\0\2\31\3\0\2\31\3\0\3\31\3\0\14\31\4\0"+
    "\5\31\3\0\3\31\1\0\4\31\2\0\1\31\6\0\1\31\16\0"+
    "\12\31\20\0\4\31\1\0\10\31\1\0\3\31\1\0\27\31\1\0"+
    "\20\31\3\0\10\31\1\0\3\31\1\0\4\31\7\0\2\31\1\0"+
    "\3\31\5\0\4\31\2\0\12\31\20\0\4\31\1\0\10\31\1\0"+
    "\3\31\1\0\27\31\1\0\12\31\1\0\5\31\2\0\11\31\1\0"+
    "\3\31\1\0\4\31\7\0\2\31\7\0\1\31\1\0\4\31\2\0"+
    "\12\31\1\0\2\31\16\0\3\31\1\0\10\31\1\0\3\31\1\0"+
    "\51\31\2\0\10\31\1\0\3\31\1\0\5\31\5\0\4\31\7\0"+
    "\5\31\2\0\12\31\12\0\6\31\2\0\2\31\1\0\22\31\3\0"+
    "\30\31\1\0\11\31\1\0\1\31\2\0\7\31\3\0\1\31\4\0"+
    "\6\31\1\0\1\31\1\0\10\31\6\0\12\31\2\0\2\31\15\0"+
    "\72\31\5\0\17\31\1\0\12\31\47\0\2\31\1\0\1\31\2\0"+
    "\2\31\1\0\1\31\2\0\1\31\6\0\4\31\1\0\7\31\1\0"+
    "\3\31\1\0\1\31\1\0\1\31\2\0\2\31\1\0\15\31\1\0"+
    "\3\31\2\0\5\31\1\0\1\31\1\0\6\31\2\0\12\31\2\0"+
    "\4\31\40\0\1\31\27\0\2\31\6\0\12\31\13\0\1\31\1\0"+
    "\1\31\1\0\1\31\4\0\12\31\1\0\44\31\4\0\24\31\1\0"+
    "\22\31\1\0\44\31\11\0\1\31\71\0\112\31\6\0\116\31\2\0"+
    "\46\31\1\0\1\31\5\0\1\31\2\0\53\31\1\0\u014d\31\1\0"+
    "\4\31\2\0\7\31\1\0\1\31\1\0\4\31\2\0\51\31\1\0"+
    "\4\31\2\0\41\31\1\0\4\31\2\0\7\31\1\0\1\31\1\0"+
    "\4\31\2\0\17\31\1\0\71\31\1\0\4\31\2\0\103\31\2\0"+
    "\3\31\40\0\20\31\20\0\126\31\2\0\6\31\3\0\u026c\31\2\0"+
    "\21\31\1\0\32\31\5\0\113\31\3\0\13\31\7\0\15\31\1\0"+
    "\7\31\13\0\25\31\13\0\24\31\14\0\15\31\1\0\3\31\1\0"+
    "\2\31\14\0\124\31\3\0\1\31\4\0\2\31\2\0\12\31\41\0"+
    "\3\31\2\0\12\31\6\0\130\31\10\0\53\31\5\0\106\31\12\0"+
    "\37\31\1\0\14\31\4\0\14\31\12\0\50\31\2\0\5\31\13\0"+
    "\54\31\4\0\32\31\6\0\12\31\46\0\34\31\4\0\77\31\1\0"+
    "\35\31\2\0\13\31\6\0\12\31\15\0\1\31\10\0\17\31\101\0"+
    "\114\31\4\0\12\31\21\0\11\31\14\0\164\31\14\0\70\31\10\0"+
    "\12\31\3\0\61\31\2\0\11\31\107\0\3\31\1\0\43\31\1\0"+
    "\2\31\6\0\366\31\5\0\u011b\31\2\0\6\31\2\0\46\31\2\0"+
    "\6\31\2\0\10\31\1\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\37\31\2\0\65\31\1\0\7\31\1\0\1\31\3\0\3\31\1\0"+
    "\7\31\3\0\4\31\2\0\6\31\4\0\15\31\5\0\3\31\1\0"+
    "\7\31\102\0\2\31\23\0\1\31\34\0\1\31\15\0\1\31\20\0"+
    "\15\31\63\0\41\31\21\0\1\31\4\0\1\31\2\0\12\31\1\0"+
    "\1\31\3\0\5\31\6\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\4\31\1\0\13\31\2\0\4\31\5\0\5\31\4\0\1\31\21\0"+
    "\51\31\u032d\0\64\31\u0716\0\57\31\1\0\57\31\1\0\205\31\6\0"+
    "\11\31\14\0\46\31\1\0\1\31\5\0\1\31\2\0\70\31\7\0"+
    "\1\31\17\0\30\31\11\0\7\31\1\0\7\31\1\0\7\31\1\0"+
    "\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0"+
    "\40\31\57\0\1\31\u01d5\0\3\31\31\0\17\31\1\0\5\31\2\0"+
    "\5\31\4\0\126\31\2\0\2\31\2\0\3\31\1\0\132\31\1\0"+
    "\4\31\5\0\51\31\3\0\136\31\21\0\33\31\65\0\20\31\u0200\0"+
    "\u19b6\31\112\0\u51d6\31\52\0\u048d\31\103\0\56\31\2\0\u010d\31\3\0"+
    "\34\31\24\0\63\31\1\0\12\31\1\0\163\31\45\0\11\31\2\0"+
    "\147\31\2\0\44\31\1\0\10\31\77\0\61\31\30\0\64\31\14\0"+
    "\106\31\12\0\12\31\6\0\30\31\3\0\1\31\1\0\1\31\2\0"+
    "\56\31\2\0\44\31\14\0\35\31\3\0\101\31\16\0\13\31\6\0"+
    "\37\31\1\0\67\31\11\0\16\31\2\0\12\31\6\0\27\31\3\0"+
    "\111\31\30\0\3\31\2\0\20\31\2\0\5\31\12\0\6\31\2\0"+
    "\6\31\2\0\6\31\11\0\7\31\1\0\7\31\1\0\53\31\1\0"+
    "\12\31\12\0\173\31\1\0\2\31\2\0\12\31\6\0\u2ba4\31\14\0"+
    "\27\31\4\0\61\31\u2104\0\u016e\31\2\0\152\31\46\0\7\31\14\0"+
    "\5\31\5\0\14\31\1\0\15\31\1\0\5\31\1\0\1\31\1\0"+
    "\2\31\1\0\2\31\1\0\154\31\41\0\u016b\31\22\0\100\31\2\0"+
    "\66\31\50\0\14\31\4\0\20\31\20\0\20\31\3\0\2\31\30\0"+
    "\3\31\40\0\5\31\1\0\207\31\23\0\12\31\7\0\32\31\4\0"+
    "\1\31\1\0\32\31\13\0\131\31\3\0\6\31\2\0\6\31\2\0"+
    "\6\31\2\0\3\31\43\0\14\31\1\0\32\31\1\0\23\31\1\0"+
    "\2\31\1\0\17\31\2\0\16\31\42\0\173\31\105\0\65\31\210\0"+
    "\1\31\202\0\35\31\3\0\61\31\17\0\1\31\37\0\40\31\20\0"+
    "\33\31\5\0\53\31\5\0\36\31\2\0\44\31\4\0\10\31\1\0"+
    "\5\31\52\0\236\31\2\0\12\31\6\0\44\31\4\0\44\31\4\0"+
    "\50\31\10\0\64\31\234\0\u0137\31\11\0\26\31\12\0\10\31\230\0"+
    "\6\31\2\0\1\31\1\0\54\31\1\0\2\31\3\0\1\31\2\0"+
    "\27\31\12\0\27\31\11\0\37\31\101\0\23\31\1\0\2\31\12\0"+
    "\26\31\12\0\32\31\106\0\70\31\6\0\2\31\100\0\4\31\1\0"+
    "\2\31\5\0\10\31\1\0\3\31\1\0\33\31\4\0\3\31\4\0"+
    "\1\31\40\0\35\31\3\0\35\31\43\0\10\31\1\0\36\31\31\0"+
    "\66\31\12\0\26\31\12\0\23\31\15\0\22\31\156\0\111\31\67\0"+
    "\63\31\15\0\63\31\u030d\0\107\31\37\0\12\31\17\0\74\31\25\0"+
    "\31\31\7\0\12\31\6\0\65\31\1\0\12\31\20\0\44\31\2\0"+
    "\1\31\11\0\105\31\5\0\3\31\3\0\13\31\1\0\1\31\43\0"+
    "\22\31\1\0\45\31\6\0\1\31\101\0\7\31\1\0\1\31\1\0"+
    "\4\31\1\0\17\31\1\0\12\31\7\0\73\31\5\0\12\31\6\0"+
    "\4\31\1\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31\1\0"+
    "\2\31\1\0\5\31\2\0\11\31\2\0\2\31\2\0\3\31\2\0"+
    "\1\31\6\0\1\31\5\0\7\31\2\0\7\31\3\0\5\31\213\0"+
    "\113\31\5\0\12\31\46\0\106\31\1\0\1\31\10\0\12\31\246\0"+
    "\66\31\2\0\11\31\27\0\6\31\42\0\101\31\3\0\1\31\13\0"+
    "\12\31\46\0\70\31\10\0\12\31\66\0\32\31\3\0\17\31\4\0"+
    "\12\31\u0166\0\112\31\25\0\1\31\u01c0\0\71\31\u0107\0\11\31\1\0"+
    "\55\31\1\0\11\31\17\0\12\31\30\0\36\31\2\0\26\31\1\0"+
    "\16\31\u0349\0\u039a\31\146\0\157\31\21\0\304\31\u0abc\0\u042f\31\u0fd1\0"+
    "\u0247\31\u21b9\0\u0239\31\7\0\37\31\1\0\12\31\146\0\36\31\2\0"+
    "\5\31\13\0\67\31\11\0\4\31\14\0\12\31\11\0\25\31\5\0"+
    "\23\31\u0370\0\105\31\13\0\57\31\20\0\21\31\100\0\1\31\37\0"+
    "\u17ed\31\23\0\u02f3\31\u250d\0\2\31\u0bfe\0\153\31\5\0\15\31\3\0"+
    "\11\31\7\0\12\31\3\0\2\31\u14c6\0\5\31\3\0\6\31\10\0"+
    "\10\31\2\0\7\31\36\0\4\31\224\0\3\31\u01bb\0\125\31\1\0"+
    "\107\31\1\0\2\31\2\0\1\31\2\0\2\31\2\0\4\31\1\0"+
    "\14\31\1\0\1\31\1\0\7\31\1\0\101\31\1\0\4\31\2\0"+
    "\10\31\1\0\7\31\1\0\34\31\1\0\4\31\1\0\5\31\1\0"+
    "\1\31\3\0\7\31\1\0\u0154\31\2\0\31\31\1\0\31\31\1\0"+
    "\37\31\1\0\31\31\1\0\37\31\1\0\31\31\1\0\37\31\1\0"+
    "\31\31\1\0\37\31\1\0\31\31\1\0\10\31\2\0\62\31\u0200\0"+
    "\67\31\4\0\62\31\10\0\1\31\16\0\1\31\26\0\5\31\1\0"+
    "\17\31\u0550\0\7\31\1\0\21\31\2\0\7\31\1\0\2\31\1\0"+
    "\5\31\u07d5\0\305\31\13\0\7\31\51\0\113\31\5\0\12\31\u04a6\0"+
    "\4\31\1\0\33\31\1\0\2\31\1\0\1\31\2\0\1\31\1\0"+
    "\12\31\1\0\4\31\1\0\1\31\1\0\1\31\6\0\1\31\4\0"+
    "\1\31\1\0\1\31\1\0\1\31\1\0\3\31\1\0\2\31\1\0"+
    "\1\31\2\0\1\31\1\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\1\31\1\0\2\31\1\0\1\31\2\0\4\31\1\0\7\31\1\0"+
    "\4\31\1\0\4\31\1\0\1\31\1\0\12\31\1\0\21\31\5\0"+
    "\3\31\1\0\5\31\1\0\21\31\u0274\0\32\31\6\0\32\31\6\0"+
    "\32\31\u0e76\0\ua6d7\31\51\0\u1035\31\13\0\336\31\2\0\u1682\31\u295e\0"+
    "\u021e\31\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\31\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\7\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\5\1\3\1\7\2\5\1\7\1\3\1\1"+
    "\1\4\1\1\1\5\1\3\2\1\2\10\2\1\1\11"+
    "\10\0\2\6\2\0\2\7\1\0\1\12\1\0\1\13"+
    "\1\14\1\0\2\11\13\0\2\7\2\14\2\15\2\0"+
    "\1\16\6\0\2\7\1\0\1\17\1\0\1\7\1\20"+
    "\1\0\1\7\1\0\1\7\1\21\4\7\3\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\330\0\u0240\0\u0120\0\u0264\0\u0288\0\u02ac\0\u0240\0\u02d0"+
    "\0\u02f4\0\u0318\0\u033c\0\u02d0\0\u0360\0\u0384\0\u03a8\0\u03cc"+
    "\0\u0384\0\u03f0\0\u0414\0\u0438\0\330\0\u045c\0\u0480\0\u04a4"+
    "\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4"+
    "\0\u05e8\0\330\0\u0288\0\u060c\0\u0630\0\u0654\0\u0360\0\330"+
    "\0\u03a8\0\u03f0\0\u0678\0\u069c\0\u06c0\0\330\0\u06e4\0\u0708"+
    "\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828"+
    "\0\u084c\0\u0870\0\u0894\0\u08b8\0\330\0\u08dc\0\330\0\u0900"+
    "\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc\0\u0a20"+
    "\0\u0a44\0\u0a68\0\u0a8c\0\330\0\u0ab0\0\u0ad4\0\u02d0\0\u0af8"+
    "\0\u0b1c\0\u0b40\0\u0b64\0\330\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4"+
    "\0\u0c18\0\u0c3c\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\3\7\1\11\1\12\1\13\1\14"+
    "\2\7\1\11\1\15\3\7\1\16\1\17\4\7\1\20"+
    "\2\7\1\21\11\7\1\22\2\23\1\24\1\25\1\22"+
    "\1\26\5\22\1\26\15\22\1\27\11\22\1\30\2\23"+
    "\3\7\1\31\5\30\1\32\4\30\1\33\10\30\1\34"+
    "\2\30\1\35\6\30\1\36\2\23\1\36\1\37\1\36"+
    "\1\40\5\36\1\40\15\36\1\41\11\36\10\7\4\42"+
    "\1\7\15\42\1\7\1\43\2\7\6\42\1\7\1\44"+
    "\1\45\5\7\4\46\1\7\15\46\1\7\1\47\2\7"+
    "\6\46\45\0\1\23\1\11\3\0\1\23\5\0\1\23"+
    "\30\0\2\23\3\0\1\23\5\0\1\23\36\0\1\50"+
    "\45\0\1\51\4\0\1\52\43\0\1\53\43\0\1\54"+
    "\36\0\1\55\1\56\51\0\1\57\34\0\1\60\32\0"+
    "\1\22\4\0\37\22\1\0\1\61\1\62\45\0\1\63"+
    "\3\0\1\64\33\0\1\22\2\23\2\0\1\22\1\26"+
    "\5\22\1\26\27\22\1\30\5\0\27\30\1\0\7\30"+
    "\2\23\3\0\1\31\5\30\1\31\20\30\1\0\7\30"+
    "\2\23\3\0\1\31\5\30\1\31\20\30\1\0\1\65"+
    "\6\30\5\0\4\30\1\66\22\30\1\0\6\30\5\67"+
    "\1\70\36\67\1\36\2\0\1\36\1\0\37\36\3\0"+
    "\1\24\1\71\37\0\1\36\2\23\1\36\1\0\1\36"+
    "\1\40\5\36\1\40\27\36\1\72\2\0\41\72\34\0"+
    "\1\73\11\0\1\45\41\0\1\74\2\0\41\74\34\0"+
    "\1\24\7\0\1\50\1\75\1\76\41\50\12\0\1\77"+
    "\51\0\1\100\50\0\1\101\35\0\1\102\1\103\41\0"+
    "\1\104\40\0\1\105\7\0\1\106\37\0\1\107\46\0"+
    "\1\110\23\0\1\62\57\0\1\111\25\0\1\30\5\0"+
    "\3\30\1\112\23\30\1\0\7\30\5\0\5\30\1\113"+
    "\21\30\1\0\6\30\1\0\1\114\1\115\41\0\1\74"+
    "\1\116\1\117\41\74\2\0\1\76\54\0\1\102\46\0"+
    "\1\120\37\0\1\121\45\0\1\122\45\0\1\123\47\0"+
    "\1\120\51\0\1\124\36\0\1\125\36\0\1\126\51\0"+
    "\1\127\40\0\1\130\22\0\1\30\5\0\4\30\1\131"+
    "\22\30\1\0\7\30\5\0\22\30\1\132\4\30\1\0"+
    "\6\30\2\0\1\115\43\0\1\117\60\0\1\133\52\0"+
    "\1\133\15\0\1\122\4\0\37\122\21\0\1\127\36\0"+
    "\1\134\45\0\1\110\36\0\1\102\51\0\1\102\44\0"+
    "\1\135\23\0\1\30\5\0\15\30\1\136\11\30\1\0"+
    "\7\30\5\0\6\30\1\137\20\30\1\0\6\30\16\0"+
    "\1\102\47\0\1\140\21\0\1\30\5\0\6\30\1\141"+
    "\20\30\1\0\6\30\11\0\1\142\32\0\1\30\5\0"+
    "\27\30\1\0\1\30\1\143\4\30\16\0\1\144\25\0"+
    "\1\30\5\0\27\30\1\0\2\30\1\145\4\30\5\0"+
    "\27\30\1\0\3\30\1\146\3\30\5\0\27\30\1\0"+
    "\4\30\1\147\2\30\5\0\27\30\1\0\5\30\1\150"+
    "\1\30\2\0\1\151\2\0\27\30\1\0\6\30\1\0"+
    "\1\152\1\153\43\0\1\153\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3168];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\11\1\1\11\23\1\1\11\3\1\10\0"+
    "\1\1\1\11\2\0\2\1\1\0\1\11\1\0\2\1"+
    "\1\0\1\1\1\11\13\0\3\1\1\11\1\1\1\11"+
    "\2\0\1\1\6\0\2\1\1\0\1\11\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\11\6\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer command = new StringBuffer();
  List<String> commands = new ArrayList<>();
  String copyTable;
  String copyColumns;

  boolean isZzAtEOF() { return zzAtEOF; }

  public List<String> getCommands(){ return this.commands; }

  public int appendCopyAsInsert(String copyData) {
	String[] values = copyData.replaceAll("\"","'\"").replaceAll("\\\\N", "NULL").split("\t");
	String valueString = Arrays.stream(values).map(t -> t.equals("NULL")?t:"'" + t + "'").collect( Collectors.joining( ", " ) );
	StringBuffer insert = new StringBuffer();
	insert.append("INSERT INTO ")
		.append(copyTable)
		.append(copyColumns)
	  	.append(" VALUES (")
	  	.append(valueString)
	  	.append(");\n");
	return commands.add(insert.toString())?1:0;
	}

	public void appendToCommand(String yytext) { this.command.append(yytext); }

	public void appendToCommand(char yytext) { this.command.append(yytext); }

	public void resetCommand() { command.setLength(0); }

	public void copyTable(String yytext) { this.copyTable = yytext; }

	public void copyColumns(String yytext) { this.copyColumns = yytext; }

	public int appendAndAddCommand(String yytext) {
		this.command.append(yytext);
		return this.commands.add(this.command.toString())?1:0;
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PSQLScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2854) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 19: break;
          case 2: 
            { /* ignore empty lines */
            } 
            // fall through
          case 20: break;
          case 3: 
            { appendToCommand('\"');
            } 
            // fall through
          case 21: break;
          case 4: 
            { appendToCommand( yytext() );
            } 
            // fall through
          case 22: break;
          case 5: 
            { appendToCommand(' ');
            } 
            // fall through
          case 23: break;
          case 6: 
            { yybegin(YYINITIAL); return appendAndAddCommand(yytext());
            } 
            // fall through
          case 24: break;
          case 7: 
            { copyTable(yytext());
            } 
            // fall through
          case 25: break;
          case 8: 
            { appendToCommand('\n');
            } 
            // fall through
          case 26: break;
          case 9: 
            { /* ignore comments*/
            } 
            // fall through
          case 27: break;
          case 10: 
            { copyColumns(yytext());
            } 
            // fall through
          case 28: break;
          case 11: 
            { return appendCopyAsInsert(yytext());
            } 
            // fall through
          case 29: break;
          case 12: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 30: break;
          case 13: 
            { ;
            } 
            // fall through
          case 31: break;
          case 14: 
            { resetCommand(); appendToCommand( yytext() ); yybegin(COMMAND);
            } 
            // fall through
          case 32: break;
          case 15: 
            { resetCommand(); appendToCommand( yytext() ); yybegin(COPY);
            } 
            // fall through
          case 33: break;
          case 16: 
            { resetCommand();
            } 
            // fall through
          case 34: break;
          case 17: 
            { yybegin(DECLARE); appendToCommand( yytext() );
            } 
            // fall through
          case 35: break;
          case 18: 
            { yybegin(INSERT);
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PSQLScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        PSQLScanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PSQLScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
