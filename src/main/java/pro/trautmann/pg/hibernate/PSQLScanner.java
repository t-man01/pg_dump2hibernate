/* The following code was generated by JFlex 1.7.0 */

/* A JFLex scanner for parsing postgresql dumps to extract jdbc commands*/

package pro.trautmann.pg.hibernate;

import java.util.ArrayList;
import java.util.List;

/**
* This class is a PostgreSQL scanner for extracting jdbc commands.
* <p>
* DO NOT EDIT - this file will be re-generated on each build.
* Instead edit pg_dump.flex file
*
* @author andreas.trautmann
*/

class PSQLScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMAND = 2;
  public static final int COPY = 4;
  public static final int DECLARE = 6;
  public static final int COPYDATA = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\5\1\2\1\0\1\5\1\1\22\0\1\12\1\0\1\37"+
    "\1\0\1\4\10\0\1\6\1\41\1\0\12\36\1\0\1\3\5\0"+
    "\1\16\1\36\1\14\1\22\1\10\1\30\1\25\1\36\1\36\1\36"+
    "\1\24\1\13\1\20\1\21\1\17\1\26\1\36\1\15\1\7\1\11"+
    "\1\36\1\23\2\36\1\27\1\36\1\0\1\40\2\0\1\36\1\0"+
    "\3\36\1\33\4\36\1\34\4\36\1\35\4\36\1\31\1\32\6\36"+
    "\57\0\1\36\12\0\1\36\4\0\1\36\5\0\27\36\1\0\37\36"+
    "\1\0\u01ca\36\4\0\14\36\16\0\5\36\7\0\1\36\1\0\1\36"+
    "\21\0\165\36\1\0\2\36\2\0\4\36\1\0\1\36\6\0\1\36"+
    "\1\0\3\36\1\0\1\36\1\0\24\36\1\0\123\36\1\0\213\36"+
    "\1\0\255\36\1\0\46\36\2\0\1\36\7\0\47\36\11\0\55\36"+
    "\1\0\1\36\1\0\2\36\1\0\2\36\1\0\1\36\10\0\33\36"+
    "\5\0\3\36\35\0\13\36\5\0\112\36\4\0\146\36\1\0\10\36"+
    "\2\0\12\36\1\0\23\36\2\0\1\36\20\0\73\36\2\0\145\36"+
    "\16\0\66\36\4\0\1\36\5\0\56\36\22\0\34\36\104\0\25\36"+
    "\1\0\10\36\26\0\16\36\1\0\201\36\2\0\12\36\1\0\23\36"+
    "\1\0\10\36\2\0\2\36\2\0\26\36\1\0\7\36\1\0\1\36"+
    "\3\0\4\36\2\0\11\36\2\0\2\36\2\0\4\36\10\0\1\36"+
    "\4\0\2\36\1\0\5\36\2\0\14\36\17\0\3\36\1\0\6\36"+
    "\4\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\2\36"+
    "\1\0\2\36\2\0\1\36\1\0\5\36\4\0\2\36\2\0\3\36"+
    "\3\0\1\36\7\0\4\36\1\0\1\36\7\0\20\36\13\0\3\36"+
    "\1\0\11\36\1\0\3\36\1\0\26\36\1\0\7\36\1\0\2\36"+
    "\1\0\5\36\2\0\12\36\1\0\3\36\1\0\3\36\2\0\1\36"+
    "\17\0\4\36\2\0\12\36\11\0\1\36\7\0\3\36\1\0\10\36"+
    "\2\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36"+
    "\2\0\11\36\2\0\2\36\2\0\3\36\10\0\2\36\4\0\2\36"+
    "\1\0\5\36\2\0\12\36\1\0\1\36\20\0\2\36\1\0\6\36"+
    "\3\0\3\36\1\0\4\36\3\0\2\36\1\0\1\36\1\0\2\36"+
    "\3\0\2\36\3\0\3\36\3\0\14\36\4\0\5\36\3\0\3\36"+
    "\1\0\4\36\2\0\1\36\6\0\1\36\16\0\12\36\20\0\4\36"+
    "\1\0\10\36\1\0\3\36\1\0\27\36\1\0\20\36\3\0\10\36"+
    "\1\0\3\36\1\0\4\36\7\0\2\36\1\0\3\36\5\0\4\36"+
    "\2\0\12\36\20\0\4\36\1\0\10\36\1\0\3\36\1\0\27\36"+
    "\1\0\12\36\1\0\5\36\2\0\11\36\1\0\3\36\1\0\4\36"+
    "\7\0\2\36\7\0\1\36\1\0\4\36\2\0\12\36\1\0\2\36"+
    "\16\0\3\36\1\0\10\36\1\0\3\36\1\0\51\36\2\0\10\36"+
    "\1\0\3\36\1\0\5\36\5\0\4\36\7\0\5\36\2\0\12\36"+
    "\12\0\6\36\2\0\2\36\1\0\22\36\3\0\30\36\1\0\11\36"+
    "\1\0\1\36\2\0\7\36\3\0\1\36\4\0\6\36\1\0\1\36"+
    "\1\0\10\36\6\0\12\36\2\0\2\36\15\0\72\36\5\0\17\36"+
    "\1\0\12\36\47\0\2\36\1\0\1\36\2\0\2\36\1\0\1\36"+
    "\2\0\1\36\6\0\4\36\1\0\7\36\1\0\3\36\1\0\1\36"+
    "\1\0\1\36\2\0\2\36\1\0\15\36\1\0\3\36\2\0\5\36"+
    "\1\0\1\36\1\0\6\36\2\0\12\36\2\0\4\36\40\0\1\36"+
    "\27\0\2\36\6\0\12\36\13\0\1\36\1\0\1\36\1\0\1\36"+
    "\4\0\12\36\1\0\44\36\4\0\24\36\1\0\22\36\1\0\44\36"+
    "\11\0\1\36\71\0\112\36\6\0\116\36\2\0\46\36\1\0\1\36"+
    "\5\0\1\36\2\0\53\36\1\0\u014d\36\1\0\4\36\2\0\7\36"+
    "\1\0\1\36\1\0\4\36\2\0\51\36\1\0\4\36\2\0\41\36"+
    "\1\0\4\36\2\0\7\36\1\0\1\36\1\0\4\36\2\0\17\36"+
    "\1\0\71\36\1\0\4\36\2\0\103\36\2\0\3\36\40\0\20\36"+
    "\20\0\126\36\2\0\6\36\3\0\u026c\36\2\0\21\36\1\0\32\36"+
    "\5\0\113\36\3\0\13\36\7\0\15\36\1\0\7\36\13\0\25\36"+
    "\13\0\24\36\14\0\15\36\1\0\3\36\1\0\2\36\14\0\124\36"+
    "\3\0\1\36\4\0\2\36\2\0\12\36\41\0\3\36\2\0\12\36"+
    "\6\0\130\36\10\0\53\36\5\0\106\36\12\0\37\36\1\0\14\36"+
    "\4\0\14\36\12\0\50\36\2\0\5\36\13\0\54\36\4\0\32\36"+
    "\6\0\12\36\46\0\34\36\4\0\77\36\1\0\35\36\2\0\13\36"+
    "\6\0\12\36\15\0\1\36\10\0\17\36\101\0\114\36\4\0\12\36"+
    "\21\0\11\36\14\0\164\36\14\0\70\36\10\0\12\36\3\0\61\36"+
    "\2\0\11\36\107\0\3\36\1\0\43\36\1\0\2\36\6\0\366\36"+
    "\5\0\u011b\36\2\0\6\36\2\0\46\36\2\0\6\36\2\0\10\36"+
    "\1\0\1\36\1\0\1\36\1\0\1\36\1\0\37\36\2\0\65\36"+
    "\1\0\7\36\1\0\1\36\3\0\3\36\1\0\7\36\3\0\4\36"+
    "\2\0\6\36\4\0\15\36\5\0\3\36\1\0\7\36\102\0\2\36"+
    "\23\0\1\36\34\0\1\36\15\0\1\36\20\0\15\36\63\0\41\36"+
    "\21\0\1\36\4\0\1\36\2\0\12\36\1\0\1\36\3\0\5\36"+
    "\6\0\1\36\1\0\1\36\1\0\1\36\1\0\4\36\1\0\13\36"+
    "\2\0\4\36\5\0\5\36\4\0\1\36\21\0\51\36\u032d\0\64\36"+
    "\u0716\0\57\36\1\0\57\36\1\0\205\36\6\0\11\36\14\0\46\36"+
    "\1\0\1\36\5\0\1\36\2\0\70\36\7\0\1\36\17\0\30\36"+
    "\11\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\7\36\1\0\7\36\1\0\7\36\1\0\40\36\57\0\1\36"+
    "\u01d5\0\3\36\31\0\17\36\1\0\5\36\2\0\5\36\4\0\126\36"+
    "\2\0\2\36\2\0\3\36\1\0\132\36\1\0\4\36\5\0\51\36"+
    "\3\0\136\36\21\0\33\36\65\0\20\36\u0200\0\u19b6\36\112\0\u51d6\36"+
    "\52\0\u048d\36\103\0\56\36\2\0\u010d\36\3\0\34\36\24\0\63\36"+
    "\1\0\12\36\1\0\163\36\45\0\11\36\2\0\147\36\2\0\44\36"+
    "\1\0\10\36\77\0\61\36\30\0\64\36\14\0\106\36\12\0\12\36"+
    "\6\0\30\36\3\0\1\36\1\0\1\36\2\0\56\36\2\0\44\36"+
    "\14\0\35\36\3\0\101\36\16\0\13\36\6\0\37\36\1\0\67\36"+
    "\11\0\16\36\2\0\12\36\6\0\27\36\3\0\111\36\30\0\3\36"+
    "\2\0\20\36\2\0\5\36\12\0\6\36\2\0\6\36\2\0\6\36"+
    "\11\0\7\36\1\0\7\36\1\0\53\36\1\0\12\36\12\0\173\36"+
    "\1\0\2\36\2\0\12\36\6\0\u2ba4\36\14\0\27\36\4\0\61\36"+
    "\u2104\0\u016e\36\2\0\152\36\46\0\7\36\14\0\5\36\5\0\14\36"+
    "\1\0\15\36\1\0\5\36\1\0\1\36\1\0\2\36\1\0\2\36"+
    "\1\0\154\36\41\0\u016b\36\22\0\100\36\2\0\66\36\50\0\14\36"+
    "\4\0\20\36\20\0\20\36\3\0\2\36\30\0\3\36\40\0\5\36"+
    "\1\0\207\36\23\0\12\36\7\0\32\36\4\0\1\36\1\0\32\36"+
    "\13\0\131\36\3\0\6\36\2\0\6\36\2\0\6\36\2\0\3\36"+
    "\43\0\14\36\1\0\32\36\1\0\23\36\1\0\2\36\1\0\17\36"+
    "\2\0\16\36\42\0\173\36\105\0\65\36\210\0\1\36\202\0\35\36"+
    "\3\0\61\36\17\0\1\36\37\0\40\36\20\0\33\36\5\0\53\36"+
    "\5\0\36\36\2\0\44\36\4\0\10\36\1\0\5\36\52\0\236\36"+
    "\2\0\12\36\6\0\44\36\4\0\44\36\4\0\50\36\10\0\64\36"+
    "\234\0\u0137\36\11\0\26\36\12\0\10\36\230\0\6\36\2\0\1\36"+
    "\1\0\54\36\1\0\2\36\3\0\1\36\2\0\27\36\12\0\27\36"+
    "\11\0\37\36\101\0\23\36\1\0\2\36\12\0\26\36\12\0\32\36"+
    "\106\0\70\36\6\0\2\36\100\0\4\36\1\0\2\36\5\0\10\36"+
    "\1\0\3\36\1\0\33\36\4\0\3\36\4\0\1\36\40\0\35\36"+
    "\3\0\35\36\43\0\10\36\1\0\36\36\31\0\66\36\12\0\26\36"+
    "\12\0\23\36\15\0\22\36\156\0\111\36\67\0\63\36\15\0\63\36"+
    "\u030d\0\107\36\37\0\12\36\17\0\74\36\25\0\31\36\7\0\12\36"+
    "\6\0\65\36\1\0\12\36\20\0\44\36\2\0\1\36\11\0\105\36"+
    "\5\0\3\36\3\0\13\36\1\0\1\36\43\0\22\36\1\0\45\36"+
    "\6\0\1\36\101\0\7\36\1\0\1\36\1\0\4\36\1\0\17\36"+
    "\1\0\12\36\7\0\73\36\5\0\12\36\6\0\4\36\1\0\10\36"+
    "\2\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36"+
    "\2\0\11\36\2\0\2\36\2\0\3\36\2\0\1\36\6\0\1\36"+
    "\5\0\7\36\2\0\7\36\3\0\5\36\213\0\113\36\5\0\12\36"+
    "\46\0\106\36\1\0\1\36\10\0\12\36\246\0\66\36\2\0\11\36"+
    "\27\0\6\36\42\0\101\36\3\0\1\36\13\0\12\36\46\0\70\36"+
    "\10\0\12\36\66\0\32\36\3\0\17\36\4\0\12\36\u0166\0\112\36"+
    "\25\0\1\36\u01c0\0\71\36\u0107\0\11\36\1\0\55\36\1\0\11\36"+
    "\17\0\12\36\30\0\36\36\2\0\26\36\1\0\16\36\u0349\0\u039a\36"+
    "\146\0\157\36\21\0\304\36\u0abc\0\u042f\36\u0fd1\0\u0247\36\u21b9\0\u0239\36"+
    "\7\0\37\36\1\0\12\36\146\0\36\36\2\0\5\36\13\0\67\36"+
    "\11\0\4\36\14\0\12\36\11\0\25\36\5\0\23\36\u0370\0\105\36"+
    "\13\0\57\36\20\0\21\36\100\0\1\36\37\0\u17ed\36\23\0\u02f3\36"+
    "\u250d\0\2\36\u0bfe\0\153\36\5\0\15\36\3\0\11\36\7\0\12\36"+
    "\3\0\2\36\u14c6\0\5\36\3\0\6\36\10\0\10\36\2\0\7\36"+
    "\36\0\4\36\224\0\3\36\u01bb\0\125\36\1\0\107\36\1\0\2\36"+
    "\2\0\1\36\2\0\2\36\2\0\4\36\1\0\14\36\1\0\1\36"+
    "\1\0\7\36\1\0\101\36\1\0\4\36\2\0\10\36\1\0\7\36"+
    "\1\0\34\36\1\0\4\36\1\0\5\36\1\0\1\36\3\0\7\36"+
    "\1\0\u0154\36\2\0\31\36\1\0\31\36\1\0\37\36\1\0\31\36"+
    "\1\0\37\36\1\0\31\36\1\0\37\36\1\0\31\36\1\0\37\36"+
    "\1\0\31\36\1\0\10\36\2\0\62\36\u0200\0\67\36\4\0\62\36"+
    "\10\0\1\36\16\0\1\36\26\0\5\36\1\0\17\36\u0550\0\7\36"+
    "\1\0\21\36\2\0\7\36\1\0\2\36\1\0\5\36\u07d5\0\305\36"+
    "\13\0\7\36\51\0\113\36\5\0\12\36\u04a6\0\4\36\1\0\33\36"+
    "\1\0\2\36\1\0\1\36\2\0\1\36\1\0\12\36\1\0\4\36"+
    "\1\0\1\36\1\0\1\36\6\0\1\36\4\0\1\36\1\0\1\36"+
    "\1\0\1\36\1\0\3\36\1\0\2\36\1\0\1\36\2\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\1\36\1\0\1\36\1\0\2\36"+
    "\1\0\1\36\2\0\4\36\1\0\7\36\1\0\4\36\1\0\4\36"+
    "\1\0\1\36\1\0\12\36\1\0\21\36\5\0\3\36\1\0\5\36"+
    "\1\0\21\36\u0274\0\32\36\6\0\32\36\6\0\32\36\u0e76\0\ua6d7\36"+
    "\51\0\u1035\36\13\0\336\36\2\0\u1682\36\u295e\0\u021e\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\36\uffff\0\uffff\0\ufe12\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\7\1\1\3\1\4\1\5\2\1"+
    "\1\5\1\3\3\1\1\4\1\1\1\5\1\3\2\6"+
    "\1\7\7\0\2\10\4\0\1\10\2\0\2\7\12\0"+
    "\2\11\1\0\1\12\24\0\1\13\17\0\1\14\1\15"+
    "\2\14\2\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\252"+
    "\0\u01fe\0\356\0\u0220\0\u0242\0\u0264\0\u01fe\0\u0286\0\u02a8"+
    "\0\u02ca\0\u02ec\0\u030e\0\u0330\0\u02ec\0\u0352\0\252\0\u0374"+
    "\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484"+
    "\0\252\0\u0242\0\u04a6\0\u04c8\0\u04ea\0\u0220\0\u0220\0\u030e"+
    "\0\u050c\0\252\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8"+
    "\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\252\0\u06a4\0\u06c6"+
    "\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6"+
    "\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6"+
    "\0\u0908\0\u092a\0\u094c\0\u096e\0\252\0\u0990\0\u09b2\0\u09d4"+
    "\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4"+
    "\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\252"+
    "\0\u0bf4\0\252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\2\6\1\10\1\11\1\12\2\6"+
    "\1\10\1\6\1\13\1\14\1\15\3\6\1\16\2\6"+
    "\1\17\11\6\1\20\2\6\1\21\2\22\1\23\1\24"+
    "\1\25\4\21\1\25\24\21\1\26\2\21\1\6\2\22"+
    "\2\6\1\22\1\6\3\27\1\22\1\27\1\30\22\27"+
    "\1\20\1\31\1\6\1\32\2\22\1\32\1\33\1\34"+
    "\4\32\1\34\24\32\1\35\2\32\1\6\1\36\1\37"+
    "\4\6\3\27\1\6\24\27\1\6\1\31\1\6\43\0"+
    "\1\22\1\10\2\0\1\22\4\0\1\22\30\0\2\22"+
    "\2\0\1\22\4\0\1\22\35\0\1\40\43\0\1\41"+
    "\46\0\1\42\1\0\1\43\32\0\1\44\44\0\1\45"+
    "\36\0\1\46\46\0\1\47\24\0\1\21\4\0\35\21"+
    "\1\0\1\50\1\51\43\0\1\52\15\0\1\53\17\0"+
    "\1\21\2\22\2\0\1\25\4\21\1\25\27\21\1\54"+
    "\2\0\40\54\2\0\14\54\1\55\22\54\41\0\1\56"+
    "\1\32\2\0\1\32\1\0\35\32\3\0\1\57\1\60"+
    "\35\0\1\32\2\22\1\32\1\0\1\34\4\32\1\34"+
    "\27\32\2\0\1\37\37\0\1\40\1\61\1\62\37\40"+
    "\11\0\1\63\1\0\1\64\36\0\1\65\51\0\1\66"+
    "\5\0\1\67\36\0\1\70\27\0\1\71\43\0\1\72"+
    "\44\0\1\73\25\0\1\51\47\0\1\74\31\0\1\54"+
    "\1\75\1\76\40\54\1\75\1\76\23\54\1\77\13\54"+
    "\2\0\1\62\51\0\1\100\37\0\1\101\47\0\1\102"+
    "\43\0\1\103\50\0\1\104\31\0\1\105\32\0\1\106"+
    "\41\0\1\102\52\0\1\107\34\0\1\110\27\0\1\76"+
    "\37\0\1\54\1\75\1\76\24\54\1\111\12\54\1\100"+
    "\4\0\35\100\14\0\1\107\36\0\1\112\40\0\1\73"+
    "\31\0\1\113\4\0\35\113\24\0\1\112\32\0\1\63"+
    "\35\0\1\63\43\0\1\114\26\0\1\115\1\75\1\76"+
    "\2\54\35\115\10\0\1\63\31\0\1\113\4\0\23\113"+
    "\1\116\11\113\16\0\1\117\23\0\1\115\1\75\1\76"+
    "\2\54\23\115\1\120\11\115\1\113\4\0\10\113\1\121"+
    "\12\113\1\116\11\113\15\0\1\122\24\0\1\115\1\75"+
    "\1\76\2\54\10\115\1\123\12\115\1\120\11\115\1\113"+
    "\4\0\12\113\1\124\10\113\1\116\11\113\10\0\1\125"+
    "\31\0\1\115\1\75\1\76\2\54\12\115\1\126\10\115"+
    "\1\120\11\115\1\113\4\0\13\113\1\127\7\113\1\116"+
    "\11\113\1\115\1\75\1\76\2\54\13\115\1\130\7\115"+
    "\1\120\11\115\1\113\4\0\5\113\1\131\15\113\1\116"+
    "\11\113\1\115\1\75\1\76\2\54\5\115\1\132\15\115"+
    "\1\120\11\115\1\113\4\0\23\113\1\116\1\133\10\113"+
    "\1\115\1\75\1\76\2\54\23\115\1\120\1\134\10\115"+
    "\1\113\4\0\23\113\1\116\1\113\1\135\7\113\1\115"+
    "\1\75\1\76\2\54\23\115\1\120\1\115\1\136\7\115"+
    "\1\113\4\0\23\113\1\116\2\113\1\137\6\113\1\115"+
    "\1\75\1\76\2\54\23\115\1\120\2\115\1\140\6\115"+
    "\1\113\4\0\23\113\1\116\3\113\1\141\5\113\1\115"+
    "\1\75\1\76\2\54\23\115\1\120\3\115\1\142\5\115"+
    "\1\113\4\0\23\113\1\116\4\113\1\143\4\113\1\115"+
    "\1\75\1\76\2\54\23\115\1\120\4\115\1\144\4\115"+
    "\1\113\2\0\1\145\1\0\23\113\1\116\11\113\1\115"+
    "\1\75\1\76\1\146\1\54\23\115\1\120\11\115\1\0"+
    "\1\147\1\150\37\0\1\54\1\151\1\152\37\54\2\0"+
    "\1\150\41\0\1\152\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\11\1\1\11\16\1\1\11\1\1\7\0"+
    "\1\1\1\11\4\0\1\1\2\0\1\1\1\11\12\0"+
    "\1\1\1\11\1\0\1\1\24\0\1\11\17\0\3\1"+
    "\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer command = new StringBuffer();
  List<String> commands = new ArrayList<>();

  boolean isZzAtEOF() {
    return zzAtEOF;
  }

  public List<String> getCommands(){
    return this.commands;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PSQLScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2848) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 14: break;
          case 2:
            { /* ignore empty lines */
            }
            // fall through
          case 15: break;
          case 3:
            { command.append('\"');
            }
            // fall through
          case 16: break;
          case 4:
            { command.append( yytext() );
            }
            // fall through
          case 17: break;
          case 5:
            { command.append(' ');
            }
            // fall through
          case 18: break;
          case 6:
            { command.append('\n');
            }
            // fall through
          case 19: break;
          case 7:
            { /* ignore comments*/
            }
            // fall through
          case 20: break;
          case 8:
            { yybegin(YYINITIAL); command.append(yytext()); return commands.add(command.toString())?1:0;
            }
            // fall through
          case 21: break;
          case 9:
            { command.append(yytext().replaceAll("\"","\\\""));
            }
            // fall through
          case 22: break;
          case 10:
            { command.setLength(0); command.append( yytext() ); yybegin(COMMAND);
            }
            // fall through
          case 23: break;
          case 11:
            { yybegin(DECLARE); command.append( yytext() );
            }
            // fall through
          case 24: break;
          case 12:
            { command.setLength(0); command.append( yytext() ); yybegin(COPY);
            }
            // fall through
          case 25: break;
          case 13:
            { command.setLength(0); command.append(yytext()); yybegin(COPYDATA);
            }
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PSQLScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        PSQLScanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PSQLScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
